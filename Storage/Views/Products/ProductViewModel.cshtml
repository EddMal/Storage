@model IEnumerable<Storage.Models.ProductViewModel>

@{
    ViewData["Title"] = "ProductViewModel";
    var test = new Product();
    string category = "category";
}

<h1>ProductViewModel</h1>
<p>Filter result by searching for category:</p>

@* <form asp-action="ProductSearchViewModel">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="input-group mb3">
        <input type="text" class="form-control" id="category" name="category" placeholder="Kategori">
        <span asp-validation-for="@test.Category" class="text-danger"></span>
        <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Search</button>
    </div>
</form> *@

@* correct routing, validation works, sends no data
<form asp-action="ProductSearchViewModel">
    <div asp-validation-summary="All" class="text-danger"></div>
 <div class="form-group">
        <label asp-for="@test.Category" class="control-label"></label>
        <input asp-for="@test.Category" class="form-control" />
        <span asp-validation-for="@test.Category" class="text-danger"></span>
            </div>
            <div class="form-group">
        <input type="submit" value="ProductSearchViewModel" class="btn btn-primary" />
            </div>
        </form> *@

<form asp-action="ProductSearchViewModel" method="get">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="@test.Category" class="control-label"></label>
        @* 1. Problem usage of input asp-for="@category, send/data/routing, as is breaks the valiadation, but sends data.
        2. When = @test.Category validation works but data is not being sent to ProductSearch.
        3. Solve by adding name = category.
        *@
        <input asp-for="@test.Category" name="category" class="form-control" />
        <span asp-validation-for="@test.Category" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="ProductSearchViewModel" class="btn btn-primary" />
    </div>
</form>

@* <form asp-action="ProductSearchViewModel" method="get">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="@test.Category" class="control-label"></label>
        <input asp-for="@test.Category" id="category" name="category" class="form-control" />
        <span asp-validation-for="@test.Category" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="ProductSearchViewModel" class="btn btn-primary" />
    </div>
</form> *@


@* routing correct, sends correct data, validation of data does not work
<form asp-action="ProductSearchViewModel" method="get">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="@test.Category" class="control-label"></label>
        <input asp-for="@test.Category" id="category" name="category" class="form-control" />
        <span asp-validation-for="@test.Category" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="ProductSearchViewModel" class="btn btn-primary" />
    </div>
</form> *@



@*  <form asp-action="ProductSearchViewModel" asp-controller="Products">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="@test.Category" class="control-label"></label>
        <input type="text" class="form-control" name="category" placeholder="Kategori">
        <span asp-validation-for="@test.Category" class="text-danger"></span>
        <button class="btn btn-outline-secondary" id="b2" type="submit">Search</button>
        <asp:Button ID="b2" OnClick="b2" Text="category" />
    </div>
</form>  *@



<table class="table">
    <thead>
        <tr>

            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Count)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InventoryValue)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Count)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InventoryValue)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    
            </td>
        </tr>
}
    </tbody>
</table>

    @section Scripts {
        @{
         await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }